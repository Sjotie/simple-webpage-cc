# EXAMPLE 6: Using Secrets and Environment Variables
# This demonstrates how to handle sensitive data safely

name: Secrets and Variables Demo

on:
  workflow_dispatch:  # Manual trigger only for this demo

# You can define environment variables at different levels
env:
  # Workflow-level variables (available to all jobs)
  NODE_ENV: production
  APP_NAME: "My Simple Webpage"

jobs:
  demonstrate-variables:
    runs-on: ubuntu-latest
    
    # Job-level environment variables
    env:
      JOB_VAR: "This is job-specific"
    
    steps:
      # Step-level environment variables
      - name: Show all variable types
        env:
          STEP_VAR: "This is step-specific"
        run: |
          echo "=== Environment Variables Demo ==="
          echo "Workflow var: $NODE_ENV"
          echo "Job var: $JOB_VAR"  
          echo "Step var: $STEP_VAR"
          echo "GitHub var: ${{ github.repository }}"
      
      # Using secrets (must be set in repository settings)
      - name: Use secrets safely
        env:
          # Secrets are masked in logs automatically
          API_KEY: ${{ secrets.API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "=== Secrets Demo ==="
          # Check if secrets exist without exposing them
          if [ -z "$API_KEY" ]; then
            echo "❌ API_KEY secret not set"
          else
            echo "✅ API_KEY is configured (hidden for security)"
            echo "Length: ${#API_KEY} characters"
          fi
          
      # GitHub provides many built-in variables
      - name: GitHub context variables
        run: |
          echo "=== GitHub Context ==="
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run Number: ${{ github.run_number }}"
          
      # Creating outputs to pass between steps
      - name: Set outputs
        id: vars
        run: |
          echo "version=1.2.3" >> $GITHUB_OUTPUT
          echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT
      
      - name: Use outputs from previous step
        run: |
          echo "Version from previous step: ${{ steps.vars.outputs.version }}"
          echo "Timestamp: ${{ steps.vars.outputs.timestamp }}"